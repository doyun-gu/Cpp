/*
MCE - Example Programâ€œ LED State Machine

This program uses the Nucleo-64 board and the Application Shield.
The program demonstrates how a state machine can be used to control the execution of a program depending on the specific state of a single variable. An enum type named 
'mystate' has a pre-defined number of states, which are cycled through in response to interrupts generated by the fire pin. The result is that the colour of the RGB LED
changes with each button press. The colour of the LED corresponds to the state that the program is executing at that point.  

When the ISR is called the next state is determined by checking the current state, and updating the enum accordingly.

*/

#include "mbed.h"

class LED                                           //Begin LED class definition
{

protected:                                          //Protected (Private) data member declaration
    DigitalOut outputSignal;                        //Declaration of DigitalOut object
    bool status;                                    //Variable to recall the state of the LED

public:                                             //Public declarations
    LED(PinName pin) : outputSignal(pin)
    {
        off();   //Constructor - user provided pin name is assigned to the DigitalOut
    }

    void on(void)                                   //Public member function for turning the LED on
    {
        outputSignal = 0;                           //Set output to 0 (LED is active low)
        status = true;                              //Set the status variable to show the LED is on
    }

    void off(void)                                  //Public member function for turning the LED off
    {
        outputSignal = 1;                           //Set output to 1 (LED is active low)
        status = false;                             //Set the status variable to show the LED is off
    }

    void toggle(void)                               //Public member function for toggling the LED
    {
        if (status)                                 //Check if the LED is currently on
            off();                                  //Turn off if so
        else                                        //Otherwise...
            on();                                   //Turn the LED on
    }

    bool getStatus(void)                            //Public member function for returning the status of the LED
    {
        return status;                              //Returns whether the LED is currently on or off
    }
};


typedef enum {initialisation, red, yellow, green, cyan, blue, purple, white, off} ProgramState;    //Definition of the enum that refers to the states of the program
ProgramState state;                             //Initialisation of the state machine, which is stored as an enum


void fireISR()                          //ISR executed each time fire is pressed. Used to advance program state.
{

 switch (state) {                       //This statement determines which state to advance to, depending on the current program state.      

        case (initialisation) :
            state = red;
            break;

        case (red) :
            state = yellow;
            break;

        case (yellow) :
            state = green;
            break;
        
        case (green) :
            state = cyan;
            break;

        case (cyan):
            state = blue;
            break;

        case (blue) :
            state = purple;
            break;
        
        case (purple):
            state = white;
            break;

        case (white) :
            state = off;
            break;

        case (off) :
            state = red;
            break;

        default:
            state = initialisation;     //Specifices a default state in case of error
 }

}


int main()                                          //Begin main function - program starts executing here.
{
   
    InterruptIn centre(D4);                         //Declare interruptIn object for centre pin
    LED redLED(D5);                                 //Declare LED object for red LED
    LED blueLED(D8);                                //Declare LED object for blue LED
    LED greenLED(D9);                               //Declare LED object for green LED

    state = initialisation;                         //Set initial state of state machine: initialisiation


    while(1) {                                      //Main while() loop

        switch (state) {                            //Main switch statement for state machine

            case (initialisation) :                 //Initialisation state
               
                centre.rise(&fireISR);
                state = red;
                break;                              //Exit switch statement

            case (red) :                            //Sets LED red

                redLED.on();
                greenLED.off();
                blueLED.off();
                break;                              //Exit switch statement
     
            case (yellow) :                         //Sets LED yellow

                redLED.on();
                greenLED.on();
                blueLED.off();
                break;                              //Exit switch statement

            case (green):                           //Sets LED green
                redLED.off();
                greenLED.on();
                blueLED.off();
                break;                              //Exit switch statement

            case (cyan):                            //Sets LED cyan
                redLED.off();
                greenLED.on();
                blueLED.on();
                break;                              //Exit switch statement

            case (blue):                            //Sets LED blue
                redLED.off();
                greenLED.off();
                blueLED.on();
                break;                              //Exit switch statement

            case (purple):                          //Sets LED purple
                redLED.on();
                greenLED.off();
                blueLED.on();               
                break;                              //Exit switch statement

            case (white):                           //Sets LED white
                redLED.on();
                greenLED.on();
                blueLED.on();   
                break;                              //Exit switch statement

            case (off):                             //Sets LED off
                redLED.off();
                greenLED.off();
                blueLED.off();   
                break;                              //Exit switch statement

            default:                                //Default state in case of error. Returns to initial state i.e. resets program.
                state = initialisation;
        }

    }
}
